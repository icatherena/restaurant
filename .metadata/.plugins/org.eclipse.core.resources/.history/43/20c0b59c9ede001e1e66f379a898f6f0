package com.restaurant.recipes.mapper;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.restaurant.recipes.dto.RecipeRequest;
import com.restaurant.recipes.model.Ingredient;
import com.restaurant.recipes.model.Recipe;
import com.restaurant.recipes.repository.IRecipeRepository;

@Component
public class RecipeMapper {
	
	@Autowired
	private RestTemplate fetchAPI; // Same label used in bean configuration
	
	@Autowired
	private IRecipeRepository repository;
	
	public Recipe toRecipeEntity(RecipeRequest r, Recipe alreadyPersisted) {
		Recipe recipe = null;
		if (alreadyPersisted == null) {
			recipe = new Recipe();
			
			if (r.getPrice() != null) {
				recipe.setPrice(r.getPrice());
			}
			
			if (r.getDescription() != null) {			
				recipe.setDescription(r.getDescription());
			}
			
			List<Ingredient> ingredientList = new ArrayList<Ingredient>();
			
			List<String> ingredients = r.getIngredients();
			
			if (!ingredients.isEmpty()) {
				for (String ingredient : ingredients) {
					Ingredient persisted = fetchAPI.getForObject("http://localhost:9002/ingredients/find-by-name/"+ingredient, 
							Ingredient.class);
					if (persisted == null) {
						persisted = new Ingredient();
						persisted.setName(ingredient);
						fetchAPI.postForObject("http://localhost:9002/ingredients/create",persisted, 
								Ingredient.class);
					}
					ingredientList.add(persisted);			
				}		
				recipe.setIngredients(ingredientList);
			}
		} else {
			if (r.getPrice() != null) {
				alreadyPersisted.setPrice(r.getPrice());
			}
			
			if (r.getDescription() != null) {			
				alreadyPersisted.setDescription(r.getDescription());
			}
			
			List<Ingredient> ingredientList = new ArrayList<Ingredient>();
			
//			List<Ingredient> ingredients = alreadyPersisted.getIngredients();
//			
//			if (!ingredients.isEmpty()) {
//				for (Ingredient ingredient : ingredients) {
//			        String ingredientName = ingredient.getName();
//			        Ingredient persisted = fetchAPI.getForObject("http://localhost:9002/ingredients/find-by-name/" + ingredientName, Ingredient.class);
//			        if (persisted == null) {
//			            persisted = new Ingredient();
//			            persisted.setName(ingredientName);
//			            persisted = fetchAPI.postForObject("http://localhost:9002/ingredients/create", persisted, Ingredient.class);
//			        }
//			        ingredientList.add(persisted);
//			    }
//			    recipe.setIngredients(ingredientList);
//			}
			List<String> ingredients = r.getIngredients();
			List<Ingredient> iPersisted = alreadyPersisted.getIngredients();
			
			if (!ingredients.isEmpty()) {
				for (String ingredient : ingredients) {
					Ingredient persisted = fetchAPI.getForObject("http://localhost:9002/ingredients/find-by-name/"+ingredient, 
							Ingredient.class);
					if (persisted == null) {
						persisted = new Ingredient();
						persisted.setName(ingredient);
						fetchAPI.postForObject("http://localhost:9002/ingredients/create",persisted, 
								Ingredient.class);
					}
					ingredientList.add(persisted);			
				}	
				for (Ingredient p : ingredientList) {
					if (!iPersisted.contains(p)) {
						iPersisted.add(p);
					}
				}
				recipe.setIngredients(iPersisted);
			}
		}
		return recipe;
	}
}
