package com.restaurant.ingredients.service.impl;

import java.util.List;
import java.util.Locale;

import org.apache.coyote.BadRequestException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;

import com.restaurant.ingredients.dto.IngredientRequest;
import com.restaurant.ingredients.enums.ErrorCode;
import com.restaurant.ingredients.exception.NotFoundException;
import com.restaurant.ingredients.mapper.IngredientMapper;
import com.restaurant.ingredients.model.Ingredient;
import com.restaurant.ingredients.repository.IngredientRepository;
import com.restaurant.ingredients.service.IIngredientService;

@Service
public class IngredientServiceImpl implements IIngredientService {
	@Autowired
	private IngredientRepository repository;

	@Autowired
	private MessageSource message;

	@Autowired
	private IngredientMapper mapper;

	@Override
	public List<Ingredient> findAllIngredient() {
		List<Ingredient> list = repository.findAll();
		if (list.isEmpty()) {
			throw new NotFoundException(message.getMessage(ErrorCode.ANY_INGREDIENT_FOUND.toString(), null, Locale.US));
		}
		return list;
	}

	@Override
	public Ingredient findIngredientById(Long id) {
		Ingredient i = repository.findById(id).orElse(null);
		if (i == null) {
			throw new NotFoundException(message.getMessage(ErrorCode.INGREDIENT_NOT_FOUND.toString(), null, Locale.US));
		}
		return i;
	}

	@Override
	public Ingredient findIngredientByName(String name) {
		Ingredient i = repository.findByName(name);
		if (i == null) {
			throw new NotFoundException(message.getMessage(ErrorCode.INGREDIENT_NOT_FOUND.toString(), null, Locale.US));
		}
		return i;
	}

	@Override
	public Ingredient createIngredient(IngredientRequest r) throws Exception {
		Ingredient already = repository.findByName(r.getName());
		if (already != null) {
			throw new BadRequestException(
					message.getMessage(ErrorCode.INGREDIENT_ALREADY_EXIST.toString(), null, Locale.US));
		}
		Ingredient i = mapper.toEntity(r);
		repository.save(i);
		return i;
	}

	@Override
	public Ingredient modifyIngredient(Long id, IngredientRequest r) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void deleteIngredientById(Long id) {
		// TODO Auto-generated method stub

	}

}
